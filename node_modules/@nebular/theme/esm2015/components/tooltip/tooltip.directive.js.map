{"version":3,"file":"tooltip.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tooltip/tooltip.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { AfterViewInit, Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\n\nimport { NbComponentStatus } from '../component-status';\nimport { NbAdjustment, NbPosition } from '../cdk/overlay/overlay-position';\nimport { NbTrigger } from '../cdk/overlay/overlay-trigger';\nimport { NbDynamicOverlay } from '../cdk/overlay/dynamic/dynamic-overlay';\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\nimport { NbTooltipComponent } from './tooltip.component';\n\n/**\n *\n * Tooltip directive for small text/icon hints.\n *\n * ### Installation\n *\n * Import `NbTooltipModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTooltipModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * @stacked-example(Showcase, tooltip/tooltip-showcase.component)\n *\n * Tooltip can accept a hint text and/or an icon:\n * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)\n *\n * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` property:\n * @stacked-example(Placements, tooltip/tooltip-placements.component)\n *\n * It is also possible to specify tooltip color using `nbTooltipStatus` property:\n * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)\n *\n * Tooltip has a number of triggers which provides an ability to show and hide the component in different ways:\n *\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\n * somewhere on the document outside the component.\n * - Hint provides capability to show the component when the user hovers over the host element\n * and hide when the user hovers out of the host.\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\n * the container element the component remains open, so that it is possible to interact with it content.\n * - Focus mode is applied when user focuses the element.\n * - Noop mode - the component won't react to the user interaction.\n */\n@Directive({\n  selector: '[nbTooltip]',\n  providers: [NbDynamicOverlayHandler, NbDynamicOverlay],\n})\nexport class NbTooltipDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n  context: Object = {};\n\n  /**\n   * Tooltip message\n   */\n  @Input('nbTooltip')\n  content: string;\n  /**\n   * Position will be calculated relatively host element based on the position.\n   * Can be top, right, bottom, left, start or end.\n   */\n  @Input('nbTooltipPlacement')\n  position: NbPosition = NbPosition.TOP;\n  /**\n   * Container position will be changes automatically based on this strategy if container can't fit view port.\n   * Set this property to any falsy value if you want to disable automatically adjustment.\n   * Available values: clockwise, counterclockwise.\n   */\n  @Input('nbTooltipAdjustment')\n  adjustment: NbAdjustment = NbAdjustment.CLOCKWISE;\n\n  /**\n   *\n   * @param {string} icon\n   */\n  @Input('nbTooltipIcon')\n  set icon(icon: string) {\n    this.context = Object.assign(this.context, {icon});\n  }\n\n  /**\n   *\n   * @param {string} status\n   */\n  @Input('nbTooltipStatus')\n  set status(status: '' | NbComponentStatus) {\n    this.context = Object.assign(this.context, {status});\n  }\n\n  /**\n   * Describes when the container will be shown.\n   * Available options: `click`, `hover`, `hint`, `focus` and `noop`\n   * */\n  @Input('nbTooltipTrigger')\n  trigger: NbTrigger = NbTrigger.HINT;\n\n  private dynamicOverlay: NbDynamicOverlay;\n\n  constructor(private hostRef: ElementRef,\n              private dynamicOverlayHandler: NbDynamicOverlayHandler) {\n  }\n\n  ngOnInit() {\n    this.dynamicOverlayHandler\n      .host(this.hostRef)\n      .componentType(NbTooltipComponent)\n      .offset(8);\n  }\n\n  ngOnChanges() {\n    this.rebuild();\n  }\n\n  ngAfterViewInit() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .build();\n  }\n\n  rebuild() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .rebuild();\n  }\n\n  show() {\n    this.dynamicOverlay.show();\n  }\n\n  hide() {\n    this.dynamicOverlay.hide();\n  }\n\n  toggle() {\n    this.dynamicOverlay.toggle();\n  }\n\n  ngOnDestroy() {\n    this.dynamicOverlayHandler.destroy();\n  }\n\n  protected configureDynamicOverlay() {\n    return this.dynamicOverlayHandler\n      .position(this.position)\n      .trigger(this.trigger)\n      .adjustment(this.adjustment)\n      .content(this.content)\n      .context(this.context);\n  }\n}\n"]}